{
  "swagger": "2.0",
  "info": {
    "description": "This is a template API server.",
    "title": "Go Template",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "name": "API Support",
      "url": "http://www.swagger.io/support",
      "email": "support@swagger.io"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0"
  },
  "host": "localhost:8080",
  "basePath": "/api/",
  "paths": {
    "/auth": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Accepts search (added as non-case sensitive LIKE) as query parameters and returns matching policies",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Authorization"],
        "summary": "Finds a list of authorization policies",
        "parameters": [
          {
            "type": "string",
            "description": "search (added to all string conditions as LIKE SQL search)",
            "name": "search",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "additionalProperties": true
              }
            }
          },
          "400": {
            "description": "Can't find policies",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Accepts a policy as a JSON body and updates the policy",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Authorization"],
        "summary": "Updates an authorization policy",
        "parameters": [
          {
            "description": "policy",
            "name": "policy",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.UpdateCasbinRule"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Policy update successful!",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Can't update policy",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Accepts a policy as a JSON body and creates the policy",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Authorization"],
        "summary": "Creates an authorization policy",
        "parameters": [
          {
            "description": "policy",
            "name": "policy",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.PolicyRule"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Policy creation successful!",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Can't create policy",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Accepts a policy as a JSON body and deletes the policy",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Authorization"],
        "summary": "Deletes an authorization policy",
        "parameters": [
          {
            "description": "policy",
            "name": "policy",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.PolicyRule"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Policy deletion successful!",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Can't delete policy",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/auth/inheritance": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Returns a list of role inheritance policies",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Authorization"],
        "summary": "Finds a list of role inheritance",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Can't find roles",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Accepts a role inheritance as a JSON body and creates the role inheritance",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Authorization"],
        "summary": "Creates a role inheritance",
        "parameters": [
          {
            "description": "Inheritance Record",
            "name": "inheritance",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.GRecord"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Inheritance creation successful!",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Can't create inheritance",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Accepts a role inheritance as a JSON body and deletes the role inheritance",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Authorization"],
        "summary": "Deletes a role inheritance",
        "parameters": [
          {
            "description": "Inheritance Record",
            "name": "inheritance",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.GRecord"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Inheritance deletion successful!",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Can't delete inheritance",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/auth/roles": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Returns a list of roles",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Authorization"],
        "summary": "Finds a list of roles",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Can't find roles",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Accepts a user_id and role as a JSON body and assigns the role to the user",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Authorization"],
        "summary": "Assigns a role to a user",
        "parameters": [
          {
            "description": "Role Assignment",
            "name": "RoleAssignment",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.CasbinRoleAssignment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User assigned role successfully!",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Can't assign user",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/auth/{policy-slug}": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Accepts resource as a URL parameter (in slug form: replace all '/' with '-') and returns matching policies associated with resource",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Authorization"],
        "summary": "Finds a list of authorization policies by resource",
        "parameters": [
          {
            "type": "string",
            "description": "policy-slug",
            "name": "policy-slug",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "additionalProperties": true
              }
            }
          },
          "400": {
            "description": "Can't find policies for resource",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/me": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Return my user details",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["My Profile"],
        "summary": "Get my user profile details",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.UserWithRole"
            }
          },
          "400": {
            "description": "Can't find user details",
            "schema": {
              "type": "string"
            }
          },
          "403": {
            "description": "Error parsing authentication token",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Updates the currently logged in user",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["My Profile"],
        "summary": "Update my profile",
        "parameters": [
          {
            "description": "Update User",
            "name": "user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.UpdateUser"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.UserWithRole"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "type": "string"
            }
          },
          "403": {
            "description": "Authentication Token not detected",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/posts": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Accepts limit, offset, order, search (added as non-case sensitive LIKE), title, body as query parameters",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Post"],
        "summary": "Finds a list of posts",
        "parameters": [
          {
            "type": "integer",
            "description": "limit",
            "name": "limit",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "description": "offset",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "order by eg. (asc) ",
            "name": "order",
            "in": "query"
          },
          {
            "type": "string",
            "description": "search (added to all string conditions as LIKE SQL search)",
            "name": "search",
            "in": "query"
          },
          {
            "type": "string",
            "description": "title",
            "name": "title",
            "in": "query"
          },
          {
            "type": "string",
            "description": "body",
            "name": "body",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.PaginatedPosts"
            }
          },
          "400": {
            "description": "Error extracting query params",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Creates a new post",
        "consumes": ["application/json"],
        "produces": ["text/plain"],
        "tags": ["Post"],
        "summary": "Create Post",
        "parameters": [
          {
            "description": "New Post",
            "name": "post",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.CreatePost"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Post creation successful!",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Post creation failed.",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/posts/{id}": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Find a post by ID",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Post"],
        "summary": "Find post",
        "parameters": [
          {
            "type": "integer",
            "description": "Post ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/db.Post"
            }
          },
          "400": {
            "description": "Can't find post with ID: {id}",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Updates an existing post",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Post"],
        "summary": "Update Post",
        "parameters": [
          {
            "description": "Update Post",
            "name": "post",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.UpdatePost"
            }
          },
          {
            "type": "integer",
            "description": "Post ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/db.Post"
            }
          },
          "400": {
            "description": "Failed post update",
            "schema": {
              "type": "string"
            }
          },
          "403": {
            "description": "Authentication Token not detected",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Deletes an existing post",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Post"],
        "summary": "Delete Post",
        "parameters": [
          {
            "type": "integer",
            "description": "Post ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Deletion successful!",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Failed post deletion",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Accepts limit, offset, order, search (added as non-case sensitive LIKE) and field names (eg. email=) query parameters to find a list of users. Search is applied to all string fields.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["User"],
        "summary": "Find a list of users",
        "parameters": [
          {
            "type": "integer",
            "description": "limit",
            "name": "limit",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "description": "offset",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "order by eg. (asc) ",
            "name": "order",
            "in": "query"
          },
          {
            "type": "string",
            "description": "search (added to all string conditions as LIKE SQL search)",
            "name": "search",
            "in": "query"
          },
          {
            "type": "string",
            "description": "email",
            "name": "email",
            "in": "query"
          },
          {
            "type": "string",
            "description": "name",
            "name": "name",
            "in": "query"
          },
          {
            "type": "string",
            "description": "username",
            "name": "username",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "verified",
            "name": "verified",
            "in": "query"
          },
          {
            "type": "string",
            "description": "role",
            "name": "role",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.PaginatedUsersWithRole"
            }
          },
          "400": {
            "description": "Error extracting query params",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "post": {
        "description": "Creates a new user",
        "consumes": ["application/json"],
        "produces": ["text/plain"],
        "tags": ["User"],
        "summary": "Create User",
        "parameters": [
          {
            "description": "New User",
            "name": "user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.CreateUser"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User creation successful!",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "User creation failed.",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/users/forgot-password": {
      "post": {
        "description": "Reset password",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Login"],
        "summary": "Reset password",
        "parameters": [
          {
            "description": "Reset Password Form",
            "name": "email",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.ResetPasswordAndEmailVerification"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Password reset request successful!",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Validation Errors",
            "schema": {
              "$ref": "#/definitions/models.ValidationError"
            }
          }
        }
      }
    },
    "/users/login": {
      "post": {
        "description": "Log in to user account",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Login"],
        "summary": "Login",
        "parameters": [
          {
            "description": "Login Form",
            "name": "user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.Login"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.LoginResponse"
            }
          },
          "400": {
            "description": "Validation Errors",
            "schema": {
              "$ref": "#/definitions/models.ValidationError"
            }
          },
          "401": {
            "description": "Invalid Credentials",
            "schema": {
              "type": "string"
            }
          },
          "405": {
            "description": "Method not supported",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/users/send-verification-email": {
      "post": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Send Verification Email",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Login"],
        "summary": "Send Verification Email",
        "responses": {
          "200": {
            "description": "Email sent successfully",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Validation Errors",
            "schema": {
              "$ref": "#/definitions/models.ValidationError"
            }
          },
          "401": {
            "description": "Email already verified",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/users/verify-email/{token}": {
      "get": {
        "description": "Email Verification",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Login"],
        "summary": "Email Verification",
        "parameters": [
          {
            "type": "string",
            "description": "Token",
            "name": "token",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Email verified successfully",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Token is required",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Invalid or expired token",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Find a user by ID",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["User"],
        "summary": "Find User",
        "parameters": [
          {
            "type": "integer",
            "description": "User ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.UserWithRole"
            }
          },
          "400": {
            "description": "Can't find user with ID: {id}",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Updates an existing user",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["User"],
        "summary": "Update User",
        "parameters": [
          {
            "description": "Update User",
            "name": "user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.UpdateUser"
            }
          },
          {
            "type": "integer",
            "description": "User ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.UserWithRole"
            }
          },
          "400": {
            "description": "Failed user update",
            "schema": {
              "type": "string"
            }
          },
          "403": {
            "description": "Authentication Token not detected",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Deletes an existing user",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["User"],
        "summary": "Delete User",
        "parameters": [
          {
            "type": "integer",
            "description": "User ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Deletion successful!",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Failed user deletion",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "db.Post": {
      "type": "object",
      "properties": {
        "body": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "deletedAt": {
          "$ref": "#/definitions/gorm.DeletedAt"
        },
        "id": {
          "type": "integer"
        },
        "title": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        },
        "user": {
          "$ref": "#/definitions/db.User"
        },
        "user_id": {
          "type": "integer"
        }
      }
    },
    "db.User": {
      "type": "object",
      "properties": {
        "created_at": {
          "type": "string"
        },
        "deletedAt": {
          "$ref": "#/definitions/gorm.DeletedAt"
        },
        "email": {
          "type": "string"
        },
        "id": {
          "description": "gorm.Model `json:\"-\"`",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "posts": {
          "description": "Relationships",
          "type": "array",
          "items": {
            "$ref": "#/definitions/db.Post"
          }
        },
        "updated_at": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "verification_code": {
          "type": "string"
        },
        "verification_code_expiry": {
          "type": "string"
        },
        "verified": {
          "description": "Verification",
          "type": "boolean"
        }
      }
    },
    "gorm.DeletedAt": {
      "type": "object",
      "properties": {
        "time": {
          "type": "string"
        },
        "valid": {
          "description": "Valid is true if Time is not NULL",
          "type": "boolean"
        }
      }
    },
    "models.CasbinRoleAssignment": {
      "type": "object",
      "properties": {
        "role": {
          "type": "string"
        },
        "user_id": {
          "type": "string"
        }
      }
    },
    "models.CreatePost": {
      "type": "object",
      "properties": {
        "body": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "user": {
          "$ref": "#/definitions/db.User"
        }
      }
    },
    "models.CreateUser": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "role": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "verified": {
          "type": "boolean"
        }
      }
    },
    "models.GRecord": {
      "type": "object",
      "properties": {
        "inherits_from": {
          "type": "string"
        },
        "role": {
          "type": "string"
        }
      }
    },
    "models.Login": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "models.LoginResponse": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string"
        }
      }
    },
    "models.PaginatedPosts": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/db.Post"
          }
        },
        "meta": {}
      }
    },
    "models.PaginatedUsersWithRole": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/models.UserWithRole"
          }
        },
        "meta": {}
      }
    },
    "models.PolicyRule": {
      "type": "object",
      "properties": {
        "action": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "role": {
          "type": "string"
        }
      }
    },
    "models.ResetPasswordAndEmailVerification": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        }
      }
    },
    "models.UpdateCasbinRule": {
      "type": "object",
      "properties": {
        "new_policy": {
          "$ref": "#/definitions/models.PolicyRule"
        },
        "old_policy": {
          "$ref": "#/definitions/models.PolicyRule"
        }
      }
    },
    "models.UpdatePost": {
      "type": "object",
      "properties": {
        "body": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "user": {
          "$ref": "#/definitions/db.User"
        }
      }
    },
    "models.UpdateUser": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "role": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "verified": {
          "type": "boolean"
        }
      }
    },
    "models.UserWithRole": {
      "type": "object",
      "properties": {
        "created_at": {
          "type": "string"
        },
        "deletedAt": {
          "$ref": "#/definitions/gorm.DeletedAt"
        },
        "email": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "role": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "verification_code": {
          "type": "string"
        },
        "verification_code_expiry": {
          "type": "string"
        },
        "verified": {
          "description": "Verification",
          "type": "boolean"
        }
      }
    },
    "models.ValidationError": {
      "type": "object",
      "properties": {
        "validation_errors": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "BearerToken": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  }
}
